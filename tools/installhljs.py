"""Install Highlight.js."""

import contextlib
import json
import os
import pathlib
import shutil
import subprocess
import tempfile
import textwrap
import typing
from dataclasses import dataclass


@contextlib.contextmanager
def pushd(new_dir):
    previous_dir = os.getcwd()
    os.chdir(new_dir)
    try:
        yield
    finally:
        os.chdir(previous_dir)


HLJS_VERSION = '11.11.1'
HLJS_REPO = 'https://github.com/highlightjs/highlight.js'
# Version 11.8.0.
HLJS_RISCV_MIN_JS = "https://raw.githubusercontent.com/highlightjs/highlightjs-riscvasm/fba4769fd2547b1525a9655f82086108ac59a1a9/dist/riscvasm.min.js"
ASSETS_HLJS = pathlib.Path('assets/_ch-highlight.js')


def delete_old_hljs_scripts() -> None:
    """Deletes all JS files associated with HLJS in assets/."""
    for f in os.listdir('assets'):
        if f.startswith('_ch-hljs-lang-'):
            os.remove(f'assets/{f}')
    os.remove('assets/_ch-highlight.js')


def build_hljs() -> pathlib.Path:
    """Builds highlight.js in the current directory.

    Returns:
        The path to the minified JS.
    """
    hljs_dir = 'highlight.js'
    subprocess.run(['git', 'clone', HLJS_REPO])
    with pushd(hljs_dir):
        subprocess.run(['git', 'checkout', HLJS_VERSION])
        subprocess.run(['npm', 'install'])
        subprocess.run(['node', 'tools/build.js', '-t', 'browser'])

    return pathlib.Path(f'{hljs_dir}/build/highlight.min.js')


class Language(typing.NamedTuple):
    name: str
    alias: str


def extract_languages_from_highlight_js(
        highlight_js_path: pathlib.Path) -> typing.Iterator[Language]:
    """Extracts languages supported by highlight.js."""
    extraction = subprocess.run([
        'node', 'tools/extract-hljs-languages.js',
        highlight_js_path.resolve()
    ],
                                capture_output=True,
                                check=True)
    for line in extraction.stdout.decode('utf-8').splitlines():
        language_json = json.loads(line)
        yield Language(name=language_json['name'],
                       alias=language_json['alias'])


def generate_hljs_languages_python_list(languages: typing.Iterable[Language],
                                        out: typing.TextIO):
    """Generates a Python module containing a list of all supported languages."""
    out.write(
        textwrap.dedent("""\
      \"""A list of all supported languages in highlight.js.

      This file is automatically generated by tools.
      \"""
      import typing


      class Language(typing.NamedTuple):
          \"""A language supported by highlight.js.\"""
          name: str
          alias: str


      languages: typing.List[Language] = [
    """))

    for language in languages:
        out.write(f'    {repr(language)},\n')
    out.write(']')


def update_hljs_language_list(hljs_file: pathlib.Path):
    """Updates the Python list of languages supported by Highlight.js.

    Args:
        hljs_file: The Highlight.js file to extract languages from.
    """
    with open('codehighlighter/hljslangs.py', 'w') as hljslangs_py:
        generate_hljs_languages_python_list(
            extract_languages_from_highlight_js(hljs_file), hljslangs_py)


def fetch_and_append_riscv_js(target_file: pathlib.Path):
    """Fetches the RISC-V JS file and appends it to the target file."""
    import requests

    try:
        response = requests.get(HLJS_RISCV_MIN_JS)
        response.raise_for_status()
        riscv_js_content = response.text

        with open(target_file, 'a', encoding='utf-8') as highlight_js:
            highlight_js.write(riscv_js_content)
    except requests.RequestException as e:
        raise RuntimeError(f"Failed to fetch RISC-V JS file: {e}.")


def install_hljs_script(target_file: pathlib.Path) -> None:
    with tempfile.TemporaryDirectory() as d:
        with pushd(d):
            hljs_min = build_hljs()
        hljs_min = pathlib.Path(d) / hljs_min
        delete_old_hljs_scripts()
        shutil.copy(hljs_min, target_file)

        with open(target_file, 'a', encoding='utf-8') as highlight_js:
            highlight_js.write('\n')

        fetch_and_append_riscv_js(target_file)


def install_hljs():
    """Installs HLJS_VERSION of Highlight.js."""
    install_hljs_script(target_file=ASSETS_HLJS)
    update_hljs_language_list(hljs_file=ASSETS_HLJS)


if __name__ == '__main__':
    install_hljs()
