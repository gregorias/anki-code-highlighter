"""Install Highlight.js."""

import contextlib
import json
import os
import pathlib
import shutil
import subprocess
import tempfile
import textwrap
import typing
from dataclasses import dataclass


@contextlib.contextmanager
def pushd(new_dir):
    previous_dir = os.getcwd()
    os.chdir(new_dir)
    try:
        yield
    finally:
        os.chdir(previous_dir)


HLJS_VERSION = '11.11.1'
HLJS_REPO = 'https://github.com/highlightjs/highlight.js'


def delete_old_hljs_scripts() -> None:
    """Deletes all JS files associated with HLJS in assets/."""
    for f in os.listdir('assets'):
        if f.startswith('_ch-hljs-lang-'):
            os.remove(f'assets/{f}')
    os.remove('assets/_ch-highlight.js')


@dataclass
class HLJSBuild():
    hljs_file: pathlib.Path
    hljs_min_file: pathlib.Path

    def prepend_path(self, parent: pathlib.Path) -> None:
        """Prepends the parent path to hljs_file and hljs_min_file."""
        self.hljs_file = parent / self.hljs_file
        self.hljs_min_file = parent / self.hljs_min_file


def build_hljs() -> HLJSBuild:
    """Builds highlight.js in the current directory."""
    hljs_dir = 'highlight.js'
    subprocess.run(['git', 'clone', HLJS_REPO])
    with pushd(hljs_dir):
        subprocess.run(['git', 'checkout', HLJS_VERSION])
        subprocess.run(['npm', 'install'])
        subprocess.run(['node', 'tools/build.js', '-t', 'browser'])

        hljs_file = 'build/highlight.js'
    return HLJSBuild(
        hljs_file=pathlib.Path(f'{hljs_dir}/build/highlight.js'),
        hljs_min_file=pathlib.Path(f'{hljs_dir}/build/highlight.min.js'))


class Language(typing.NamedTuple):
    name: str
    alias: str


def extract_languages_from_highlight_js(
        highlight_js_path: pathlib.Path) -> typing.Iterator[Language]:
    """Extracts languages supported by highlight.js."""
    extraction = subprocess.run([
        'node', 'tools/extract-hljs-languages.js',
        highlight_js_path.resolve()
    ],
                                capture_output=True,
                                check=True)
    for line in extraction.stdout.decode('utf-8').splitlines():
        language_json = json.loads(line)
        yield Language(name=language_json['name'],
                       alias=language_json['alias'])


def generate_hljs_languages_python_list(languages: typing.Iterable[Language],
                                        out: typing.TextIO):
    """Generates a Python module containing a list of all supported languages."""
    out.write(
        textwrap.dedent("""\
      \"""A list of all supported languages in highlight.js.

      This file is automatically generated by tools.
      \"""
      import typing


      class Language(typing.NamedTuple):
          \"""A language supported by highlight.js.\"""
          name: str
          alias: str


      languages: typing.List[Language] = [
    """))

    for language in languages:
        out.write(f'    {repr(language)},\n')
    out.write(']')


def update_hljs_language_list(hljs_file: pathlib.Path):
    """Updates the Python list of languages supported by Highlight.js.

    Args:
        hljs_file: The unminified highlight.js file to extract languages from.
    """
    with open('codehighlighter/hljslangs.py', 'w') as hljslangs_py:
        generate_hljs_languages_python_list(
            extract_languages_from_highlight_js(hljs_file), hljslangs_py)


def install_hljs():
    """Installs HLJS_VERSION of Highlight.js."""
    with tempfile.TemporaryDirectory() as d:
        with pushd(d):
            hljs_build = build_hljs()
        hljs_build.prepend_path(pathlib.Path(d))
        delete_old_hljs_scripts()
        shutil.copy(hljs_build.hljs_min_file, 'assets/_ch-highlight.js')

        update_hljs_language_list(hljs_build.hljs_file)


if __name__ == '__main__':
    install_hljs()
